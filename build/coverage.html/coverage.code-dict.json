{"/home/travis/build/npmtest/node-npmtest-properties/test.js":"/* istanbul instrument in package npmtest_properties */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-properties/lib.npmtest_properties.js":"/* istanbul instrument in package npmtest_properties */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_properties = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_properties = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-properties/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-properties && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_properties */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_properties\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_properties.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_properties.rollup.js'] =\n            local.assetsDict['/assets.npmtest_properties.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_properties.__dirname + '/lib.npmtest_properties.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/index.js":"\"use strict\";\r\n\r\nvar Stringifier = require (\"./stringifier\");\r\n\r\nmodule.exports = {\r\n\tparse: require (\"./read\"),\r\n\tstringify: require (\"./write\"),\r\n\tcreateStringifier: function (){\r\n\t\treturn new Stringifier ();\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/stringifier.js":"\"use strict\";\r\n\r\nvar Stringifier = module.exports = function (){\r\n\tthis._header = null;\r\n\tthis._lines = [];\r\n};\r\n\r\nStringifier.prototype.header = function (comment){\r\n\tthis._header = comment;\r\n\treturn this;\r\n};\r\n\r\nStringifier.prototype.property = function (p){\r\n\tp.property = true;\r\n\tthis._lines.push (p);\r\n\treturn this;\r\n};\r\n\r\nStringifier.prototype.section = function (p){\r\n\tif (typeof p === \"string\"){\r\n\t\tp = { name: p };\r\n\t}\r\n\tp.section = true;\r\n\tthis._lines.push (p);\r\n\treturn this;\r\n};","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/read.js":"\"use strict\";\r\n\r\nvar fs = require (\"fs\");\r\nvar path = require (\"path\");\r\nvar parse = require (\"./parse\");\r\n\r\nvar INCLUDE_KEY = \"include\";\r\nvar INDEX_FILE = \"index.properties\";\r\n\r\nvar cast = function (value){\r\n\tif (value === null || value === \"null\") return null;\r\n\tif (value === \"undefined\") return undefined;\r\n\tif (value === \"true\") return true;\r\n\tif (value === \"false\") return false;\r\n\tvar v = Number (value);\r\n\treturn isNaN (v) ? value : v;\r\n};\r\n\r\nvar expand = function  (o, str, options, cb){\r\n\tif (!options.variables || !str) return cb (null, str);\r\n\t\r\n\tvar stack = [];\r\n\tvar c;\r\n\tvar cp;\r\n\tvar key = \"\";\r\n\tvar section = null;\r\n\tvar v;\r\n\tvar holder;\r\n\tvar t;\r\n\tvar n;\r\n\t\r\n\tfor (var i=0; i<str.length; i++){\r\n\t\tc = str[i];\r\n\t\t\r\n\t\tif (cp === \"$\" && c === \"{\"){\r\n\t\t\tkey = key.substring (0, key.length - 1);\r\n\t\t\tstack.push ({\r\n\t\t\t\tkey: key,\r\n\t\t\t\tsection: section\r\n\t\t\t});\r\n\t\t\tkey = \"\";\r\n\t\t\tsection = null;\r\n\t\t\tcontinue;\r\n\t\t}else if (stack.length){\r\n\t\t\tif (options.sections && c === \"|\"){\r\n\t\t\t\tsection = key;\r\n\t\t\t\tkey = \"\";\r\n\t\t\t\tcontinue;\r\n\t\t\t}else if (c === \"}\"){\r\n\t\t\t\tholder = section !== null ? searchValue (o, section, true) : o;\r\n\t\t\t\tif (!holder){\r\n\t\t\t\t\treturn cb (new Error (\"The section \\\"\" + section + \"\\\" does not \" +\r\n\t\t\t\t\t\t\t\"exist\"));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tv = options.namespaces ? searchValue (holder, key) : holder[key];\r\n\t\t\t\tif (v === undefined){\r\n\t\t\t\t\t//Read the external vars\r\n\t\t\t\t\tv = options.namespaces\r\n\t\t\t\t\t\t\t? searchValue (options._vars, key)\r\n\t\t\t\t\t\t\t: options._vars[key]\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (v === undefined){\r\n\t\t\t\t\t\treturn cb (new Error (\"The property \\\"\" + key + \"\\\" does not \" +\r\n\t\t\t\t\t\t\t\t\"exist\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tt = stack.pop ();\r\n\t\t\t\tsection = t.section;\r\n\t\t\t\tkey = t.key + (v === null ? \"\" : v);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tcp = c;\r\n\t\tkey += c;\r\n\t}\r\n\t\r\n\tif (stack.length !== 0){\r\n\t\treturn cb (new Error (\"Malformed variable: \" + str));\r\n\t}\r\n\t\r\n\tcb (null, key);\r\n};\r\n\r\nvar searchValue = function (o, chain, section){\r\n\tvar n = chain.split (\".\");\r\n\tvar str;\r\n\t\r\n\tfor (var i=0; i<n.length-1; i++){\r\n\t\tstr = n[i];\r\n\t\tif (o[str] === undefined) return;\r\n\t\to = o[str];\r\n\t}\r\n\t\r\n\tvar v = o[n[n.length - 1]];\r\n\tif (section){\r\n\t\tif (typeof v !== \"object\") return;\r\n\t\treturn v;\r\n\t}else{\r\n\t\tif (typeof v === \"object\") return;\r\n\t\treturn v;\r\n\t}\r\n};\r\n\r\nvar namespaceKey = function (o, key, value){\r\n\tvar n = key.split (\".\");\r\n\tvar str;\r\n\t\r\n\tfor (var i=0; i<n.length-1; i++){\r\n\t\tstr = n[i];\r\n\t\tif (o[str] === undefined){\r\n\t\t\to[str] = {};\r\n\t\t}else if (typeof o[str] !== \"object\"){\r\n\t\t\tthrow new Error (\"Invalid namespace chain in the property name '\" +\r\n\t\t\t\t\tkey + \"' ('\" + str + \"' has already a value)\");\r\n\t\t}\r\n\t\to = o[str];\r\n\t}\r\n\t\r\n\to[n[n.length - 1]] = value;\r\n};\r\n\r\nvar namespaceSection = function (o, section){\r\n\tvar n = section.split (\".\");\r\n\tvar str;\r\n\t\r\n\tfor (var i=0; i<n.length; i++){\r\n\t\tstr = n[i];\r\n\t\tif (o[str] === undefined){\r\n\t\t\to[str] = {};\r\n\t\t}else if (typeof o[str] !== \"object\"){\r\n\t\t\tthrow new Error (\"Invalid namespace chain in the section name '\" +\r\n\t\t\t\t\tsection + \"' ('\" + str + \"' has already a value)\");\r\n\t\t}\r\n\t\to = o[str];\r\n\t}\r\n\t\r\n\treturn o;\r\n};\r\n\r\nvar merge = function (o1, o2){\r\n\tfor (var p in o2){\r\n\t\ttry{\r\n\t\t\tif (o1[p].constructor === Object){\r\n\t\t\t\to1[p] = merge (o1[p], o2[p]);\r\n\t\t\t}else{\r\n\t\t\t\to1[p] = o2[p];\r\n\t\t\t}\r\n\t\t}catch (e){\r\n\t\t\to1[p] = o2[p];\r\n\t\t}\r\n\t}\r\n\treturn o1;\r\n}\r\n\r\nvar build = function (data, options, dirname, cb){\r\n\tvar o = {};\r\n\t\r\n\tif (options.namespaces){\r\n\t\tvar n = {};\r\n\t}\r\n\t\r\n\tvar control = {\r\n\t\tabort: false,\r\n\t\tskipSection: false\r\n\t};\r\n\t\r\n\tif (options.include){\r\n\t\tvar remainingIncluded = 0;\r\n\t\t\r\n\t\tvar include = function (value){\r\n\t\t\tif (currentSection !== null){\r\n\t\t\t\treturn abort (new Error (\"Cannot include files from inside a \" +\r\n\t\t\t\t\t\t\"section: \" + currentSection));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar p = path.resolve (dirname, value);\r\n\t\t\tif (options._included[p]) return;\r\n\t\t\t\r\n\t\t\toptions._included[p] = true;\r\n\t\t\tremainingIncluded++;\r\n\t\t\tcontrol.pause = true;\r\n\t\t\t\r\n\t\t\tread (p, options, function (error, included){\r\n\t\t\t\tif (error) return abort (error);\r\n\t\t\t\t\r\n\t\t\t\tremainingIncluded--;\r\n\t\t\t\tmerge (options.namespaces ? n : o, included);\r\n\t\t\t\tcontrol.pause = false;\r\n\t\t\t\t\r\n\t\t\t\tif (!control.parsed){\r\n\t\t\t\t\tparse (data, options, handlers, control);\r\n\t\t\t\t\tif (control.error) return abort (control.error);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!remainingIncluded) cb (null, options.namespaces ? n : o);\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n\t\r\n\tif (!data){\r\n\t\tif (cb) return cb (null, o);\r\n\t\treturn o;\r\n\t}\r\n\t\r\n\tvar currentSection = null;\r\n\tvar currentSectionStr = null;\r\n\t\r\n\tvar abort = function (error){\r\n\t\tcontrol.abort = true;\r\n\t\tif (cb) return cb (error);\r\n\t\tthrow error;\r\n\t};\r\n\t\r\n\tvar handlers = {};\r\n\tvar reviver = {\r\n\t\tassert: function (){\r\n\t\t\treturn this.isProperty ? reviverLine.value : true;\r\n\t\t}\r\n\t};\r\n\tvar reviverLine = {};\r\n\t\r\n\t//Line handler\r\n\t//For speed reasons, if namespaces are enabled the old object is still\r\n\t//populated, e.g.: ${a.b} reads the \"a.b\" property from { \"a.b\": 1 }, instead\r\n\t//of having a unique object { a: { b: 1 } } which is slower to search for\r\n\t//the \"a.b\" value\r\n\t//If \"a.b\" is not found, then the external vars are read. If \"namespaces\" is\r\n\t//enabled the var \"a.b\" is split and it searches for a.b. If it is not enabled\r\n\t//then the var \"a.b\" searches for \"a.b\"\r\n\t\r\n\tvar line;\r\n\tvar error;\r\n\t\r\n\tif (options.reviver){\r\n\t\tif (options.sections){\r\n\t\t\tline = function (key, value){\r\n\t\t\t\tif (options.include && key === INCLUDE_KEY) return include (value);\r\n\t\t\t\t\r\n\t\t\t\treviverLine.value = value;\r\n\t\t\t\treviver.isProperty = true;\r\n\t\t\t\treviver.isSection = false;\r\n\t\t\t\t\r\n\t\t\t\tvalue = options.reviver.call (reviver, key, value, currentSectionStr);\r\n\t\t\t\tif (value !== undefined){\r\n\t\t\t\t\tif (options.namespaces){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tnamespaceKey (currentSection === null ? n : currentSection,\r\n\t\t\t\t\t\t\t\t\tkey, value);\r\n\t\t\t\t\t\t}catch (error){\r\n\t\t\t\t\t\t\tabort (error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif (currentSection === null) o[key] = value;\r\n\t\t\t\t\t\telse currentSection[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}else{\r\n\t\t\tline = function (key, value){\r\n\t\t\t\tif (options.include && key === INCLUDE_KEY) return include (value);\r\n\t\t\t\t\r\n\t\t\t\treviverLine.value = value;\r\n\t\t\t\treviver.isProperty = true;\r\n\t\t\t\treviver.isSection = false;\r\n\t\t\t\t\r\n\t\t\t\tvalue = options.reviver.call (reviver, key, value);\r\n\t\t\t\tif (value !== undefined){\r\n\t\t\t\t\tif (options.namespaces){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tnamespaceKey (n, key, value);\r\n\t\t\t\t\t\t}catch (error){\r\n\t\t\t\t\t\t\tabort (error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\to[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}else{\r\n\t\tif (options.sections){\r\n\t\t\tline = function (key, value){\r\n\t\t\t\tif (options.include && key === INCLUDE_KEY) return include (value);\r\n\t\t\t\t\r\n\t\t\t\tif (options.namespaces){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tnamespaceKey (currentSection === null ? n : currentSection, key,\r\n\t\t\t\t\t\t\t\tvalue);\r\n\t\t\t\t\t}catch (error){\r\n\t\t\t\t\t\tabort (error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif (currentSection === null) o[key] = value;\r\n\t\t\t\t\telse currentSection[key] = value;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}else{\r\n\t\t\tline = function (key, value){\r\n\t\t\t\tif (options.include && key === INCLUDE_KEY) return include (value);\r\n\t\t\t\t\r\n\t\t\t\tif (options.namespaces){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tnamespaceKey (n, key, value);\r\n\t\t\t\t\t}catch (error){\r\n\t\t\t\t\t\tabort (error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\to[key] = value;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Section handler\r\n\tvar section;\r\n\tif (options.sections){\r\n\t\tif (options.reviver){\r\n\t\t\tsection = function (section){\r\n\t\t\t\tcurrentSectionStr = section;\r\n\t\t\t\treviverLine.section = section;\r\n\t\t\t\treviver.isProperty = false;\r\n\t\t\t\treviver.isSection = true;\r\n\t\t\t\t\r\n\t\t\t\tvar add = options.reviver.call (reviver, null, null, section);\r\n\t\t\t\tif (add){\r\n\t\t\t\t\tif (options.namespaces){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tcurrentSection = namespaceSection (n, section);\r\n\t\t\t\t\t\t}catch (error){\r\n\t\t\t\t\t\t\tabort (error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tcurrentSection = o[section] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcontrol.skipSection = true;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}else{\r\n\t\t\tsection = function (section){\r\n\t\t\t\tcurrentSectionStr = section;\r\n\t\t\t\tif (options.namespaces){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tcurrentSection = namespaceSection (n, section);\r\n\t\t\t\t\t}catch (error){\r\n\t\t\t\t\t\tabort (error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcurrentSection = o[section] = {};\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Variables\r\n\tif (options.variables){\r\n\t\thandlers.line = function (key, value){\r\n\t\t\texpand (options.namespaces ? n : o, key, options, function (error, key){\r\n\t\t\t\tif (error) return abort (error);\r\n\t\t\t\t\r\n\t\t\t\texpand (options.namespaces ? n : o, value, options,\r\n\t\t\t\t\t\tfunction (error, value){\r\n\t\t\t\t\tif (error) return abort (error);\r\n\t\t\t\t\t\r\n\t\t\t\t\tline (key, cast (value || null));\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tif (options.sections){\r\n\t\t\thandlers.section = function (s){\r\n\t\t\t\texpand (options.namespaces ? n : o, s, options, function (error, s){\r\n\t\t\t\t\tif (error) return abort (error);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsection (s);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t}else{\r\n\t\thandlers.line = function (key, value){\r\n\t\t\tline (key, cast (value || null));\r\n\t\t};\r\n\t\t\r\n\t\tif (options.sections){\r\n\t\t\thandlers.section = section;\r\n\t\t}\r\n\t}\r\n\t\r\n\tparse (data, options, handlers, control);\r\n\tif (control.error) return abort (control.error);\r\n\t\r\n\tif (control.abort || control.pause) return;\r\n\t\r\n\tif (cb) return cb (null, options.namespaces ? n : o);\r\n\treturn options.namespaces ? n : o;\r\n};\r\n\r\nvar read = function (f, options, cb){\r\n\tfs.stat (f, function (error, stats){\r\n\t\tif (error) return cb (error);\r\n\t\t\r\n\t\tvar dirname;\r\n\t\t\r\n\t\tif (stats.isDirectory ()){\r\n\t\t\tdirname = f;\r\n\t\t\tf = path.join (f, INDEX_FILE);\r\n\t\t}else{\r\n\t\t\tdirname = path.dirname (f);\r\n\t\t}\r\n\t\t\r\n\t\tfs.readFile (f, { encoding: \"utf8\" }, function (error, data){\r\n\t\t\tif (error) return cb (error);\r\n\t\t\tbuild (data, options, dirname, cb);\r\n\t\t});\r\n\t});\r\n};\r\n\r\nmodule.exports = function (data, options, cb){\r\n\tif (typeof options === \"function\"){\r\n\t\tcb = options;\r\n\t\toptions = {};\r\n\t}\r\n\t\r\n\toptions = options || {};\r\n\tvar code;\r\n\t\r\n\tif (options.include){\r\n\t\tif (!cb) throw new Error (\"A callback must be passed if the 'include' \" +\r\n\t\t\t\t\"option is enabled\");\r\n\t\toptions._included = {};\r\n\t}\r\n\t\r\n\toptions = options || {};\r\n\toptions._strict = options.strict && (options.comments || options.separators);\r\n\toptions._vars = options.vars || {};\r\n\t\r\n\tvar comments = options.comments || [];\r\n\tif (!Array.isArray (comments)) comments = [comments];\r\n\tvar c = {};\r\n\tcomments.forEach (function (comment){\r\n\t\tcode = comment.charCodeAt (0);\r\n\t\tif (comment.length > 1 || code < 33 || code > 126){\r\n\t\t\tthrow new Error (\"The comment token must be a single printable ASCII \" +\r\n\t\t\t\t\t\"character\");\r\n\t\t}\r\n\t\tc[comment] = true;\r\n\t});\r\n\toptions._comments = c;\r\n\t\r\n\tvar separators = options.separators || [];\r\n\tif (!Array.isArray (separators)) separators = [separators];\r\n\tvar s = {};\r\n\tseparators.forEach (function (separator){\r\n\t\tcode = separator.charCodeAt (0);\r\n\t\tif (separator.length > 1 || code < 33 || code > 126){\r\n\t\t\tthrow new Error (\"The separator token must be a single printable ASCII \" +\r\n\t\t\t\t\t\"character\");\r\n\t\t}\r\n\t\ts[separator] = true;\r\n\t});\r\n\toptions._separators = s;\r\n\t\r\n\tif (options.path){\r\n\t\tif (!cb) throw new Error (\"A callback must be passed if the 'path' \" +\r\n\t\t\t\t\"option is enabled\");\r\n\t\tif (options.include){\r\n\t\t\tread (data, options, cb);\r\n\t\t}else{\r\n\t\t\tfs.readFile (data, { encoding: \"utf8\" }, function (error, data){\r\n\t\t\t\tif (error) return cb (error);\r\n\t\t\t\tbuild (data, options, \".\", cb);\r\n\t\t\t});\r\n\t\t}\r\n\t}else{\r\n\t\treturn build (data, options, \".\", cb);\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/parse.js":"\"use strict\";\r\n\r\nvar hex = function (c){\r\n\tswitch (c){\r\n\t\tcase \"0\": return 0;\r\n\t\tcase \"1\": return 1;\r\n\t\tcase \"2\": return 2;\r\n\t\tcase \"3\": return 3;\r\n\t\tcase \"4\": return 4;\r\n\t\tcase \"5\": return 5;\r\n\t\tcase \"6\": return 6;\r\n\t\tcase \"7\": return 7;\r\n\t\tcase \"8\": return 8;\r\n\t\tcase \"9\": return 9;\r\n\t\tcase \"a\": case \"A\": return 10;\r\n\t\tcase \"b\": case \"B\": return 11;\r\n\t\tcase \"c\": case \"C\": return 12;\r\n\t\tcase \"d\": case \"D\": return 13;\r\n\t\tcase \"e\": case \"E\": return 14;\r\n\t\tcase \"f\": case \"F\": return 15;\r\n\t}\r\n};\r\n\r\nmodule.exports = function (data, options, handlers, control){\r\n\tvar c;\r\n\tvar code;\r\n\tvar escape;\r\n\tvar skipSpace = true;\r\n\tvar isCommentLine;\r\n\tvar isSectionLine;\r\n\tvar newLine = true;\r\n\tvar multiLine;\r\n\tvar isKey = true;\r\n\tvar key = \"\";\r\n\tvar value = \"\";\r\n\tvar section;\r\n\tvar unicode;\r\n\tvar unicodeRemaining;\r\n\tvar escapingUnicode;\r\n\tvar keySpace;\r\n\tvar sep;\r\n\tvar ignoreLine;\r\n\t\r\n\tvar line = function (){\r\n\t\tif (key || value || sep){\r\n\t\t\thandlers.line (key, value);\r\n\t\t\tkey = \"\";\r\n\t\t\tvalue = \"\";\r\n\t\t\tsep = false;\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar escapeString = function (key, c, code){\r\n\t\tif (escapingUnicode && unicodeRemaining){\r\n\t\t\tunicode = (unicode << 4) + hex (c);\r\n\t\t\tif (--unicodeRemaining) return key;\r\n\t\t\tescape = false;\r\n\t\t\tescapingUnicode = false;\r\n\t\t\treturn key + String.fromCharCode (unicode);\r\n\t\t}\r\n\t\t\r\n\t\t//code 117: u\r\n\t\tif (code === 117){\r\n\t\t\tunicode = 0;\r\n\t\t\tescapingUnicode = true;\r\n\t\t\tunicodeRemaining = 4;\r\n\t\t\treturn key;\r\n\t\t}\r\n\t\t\r\n\t\tescape = false;\r\n\t\t\r\n\t\t//code 116: t\r\n\t\t//code 114: r\r\n\t\t//code 110: n\r\n\t\t//code 102: f\r\n\t\tif (code === 116) return key + \"\\t\";\r\n\t\telse if (code === 114) return key + \"\\r\";\r\n\t\telse if (code === 110) return key + \"\\n\";\r\n\t\telse if (code === 102) return key + \"\\f\";\r\n\t\t\r\n\t\treturn key + c;\r\n\t};\r\n\t\r\n\tvar isComment;\r\n\tvar isSeparator;\r\n\t\r\n\tif (options._strict){\r\n\t\tisComment = function (c, code, options){\r\n\t\t\treturn options._comments[c];\r\n\t\t};\r\n\r\n\t\tisSeparator = function (c, code, options){\r\n\t\t\treturn options._separators[c];\r\n\t\t};\r\n\t}else{\r\n\t\tisComment = function (c, code, options){\r\n\t\t\t//code 35: #\r\n\t\t\t//code 33: !\r\n\t\t\treturn code === 35 || code === 33 || options._comments[c];\r\n\t\t};\r\n\r\n\t\tisSeparator = function (c, code, options){\r\n\t\t\t//code 61: =\r\n\t\t\t//code 58: :\r\n\t\t\treturn code === 61 || code === 58 || options._separators[c];\r\n\t\t};\r\n\t}\r\n\t\r\n\tfor (var i=~~control.resume; i<data.length; i++){\r\n\t\tif (control.abort) return;\r\n\t\tif (control.pause){\r\n\t\t\t//The next index is always the start of a new line, it's a like a fresh\r\n\t\t\t//start, there's no need to save the current state\r\n\t\t\tcontrol.resume = i;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tc = data[i];\r\n\t\tcode = data.charCodeAt (i);\r\n\t\t\r\n\t\t//code 13: \\r\r\n\t\tif (code === 13) continue;\r\n\t\t\r\n\t\tif (isCommentLine){\r\n\t\t\t//code 10: \\n\r\n\t\t\tif (code === 10){\r\n\t\t\t\tisCommentLine = false;\r\n\t\t\t\tnewLine = true;\r\n\t\t\t\tskipSpace = true;\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\t//code 93: ]\r\n\t\tif (isSectionLine && code === 93){\r\n\t\t\thandlers.section (section);\r\n\t\t\t//Ignore chars after the section in the same line\r\n\t\t\tignoreLine = true;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\tif (skipSpace){\r\n\t\t\t//code 32: \" \" (space)\r\n\t\t\t//code 9: \\t\r\n\t\t\t//code 12: \\f\r\n\t\t\tif (code === 32 || code === 9 || code === 12){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t//code 10: \\n\r\n\t\t\tif (!multiLine && code === 10){\r\n\t\t\t\t//Empty line or key w/ separator and w/o value\r\n\t\t\t\tisKey = true;\r\n\t\t\t\tkeySpace = false;\r\n\t\t\t\tnewLine = true;\r\n\t\t\t\tline ();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tskipSpace = false;\r\n\t\t\tmultiLine = false;\r\n\t\t}\r\n\t\t\r\n\t\tif (newLine){\r\n\t\t\tnewLine = false;\r\n\t\t\tif (isComment (c, code, options)){\r\n\t\t\t\tisCommentLine = true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t//code 91: [\r\n\t\t\tif (options.sections && code === 91){\r\n\t\t\t\tsection = \"\";\r\n\t\t\t\tisSectionLine = true;\r\n\t\t\t\tcontrol.skipSection = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//code 10: \\n\r\n\t\tif (code !== 10){\r\n\t\t\tif (control.skipSection || ignoreLine) continue;\r\n\t\t\t\r\n\t\t\tif (!isSectionLine){\r\n\t\t\t\tif (!escape && isKey && isSeparator (c, code, options)){\r\n\t\t\t\t\t//sep is needed to detect empty key and empty value with a\r\n\t\t\t\t\t//non-whitespace separator\r\n\t\t\t\t\tsep = true;\r\n\t\t\t\t\tisKey = false;\r\n\t\t\t\t\tkeySpace = false;\r\n\t\t\t\t\t//Skip whitespace between separator and value\r\n\t\t\t\t\tskipSpace = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//code 92: \"\\\" (backslash)\r\n\t\t\tif (code === 92){\r\n\t\t\t\tif (escape){\r\n\t\t\t\t\tif (escapingUnicode) continue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (keySpace){\r\n\t\t\t\t\t\t//Line with whitespace separator\r\n\t\t\t\t\t\tkeySpace = false;\r\n\t\t\t\t\t\tisKey = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tif (isSectionLine) section += \"\\\\\";\r\n\t\t\t\t\telse if (isKey) key += \"\\\\\";\r\n\t\t\t\t\telse value += \"\\\\\";\r\n\t\t\t\t}\r\n\t\t\t\tescape = !escape;\r\n\t\t\t}else{\r\n\t\t\t\tif (keySpace){\r\n\t\t\t\t\t//Line with whitespace separator\r\n\t\t\t\t\tkeySpace = false;\r\n\t\t\t\t\tisKey = false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (isSectionLine){\r\n\t\t\t\t\tif (escape) section = escapeString (section, c, code);\r\n\t\t\t\t\telse section += c;\r\n\t\t\t\t}else if (isKey){\r\n\t\t\t\t\tif (escape){\r\n\t\t\t\t\t\tkey = escapeString (key, c, code);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//code 32: \" \" (space)\r\n\t\t\t\t\t\t//code 9: \\t\r\n\t\t\t\t\t\t//code 12: \\f\r\n\t\t\t\t\t\tif (code === 32 || code === 9 || code === 12){\r\n\t\t\t\t\t\t\tkeySpace = true;\r\n\t\t\t\t\t\t\t//Skip whitespace between key and separator\r\n\t\t\t\t\t\t\tskipSpace = true;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tkey += c;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif (escape) value = escapeString (value, c, code);\r\n\t\t\t\t\telse value += c;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif (escape){\r\n\t\t\t\tif (!escapingUnicode){\r\n\t\t\t\t\tescape = false;\r\n\t\t\t\t}\r\n\t\t\t\tskipSpace = true;\r\n\t\t\t\tmultiLine = true;\r\n\t\t\t}else{\r\n\t\t\t\tif (isSectionLine){\r\n\t\t\t\t\tisSectionLine = false;\r\n\t\t\t\t\tif (!ignoreLine){\r\n\t\t\t\t\t\t//The section doesn't end with ], it's a key\r\n\t\t\t\t\t\tcontrol.error = new Error (\"The section line \\\"\" + section +\r\n\t\t\t\t\t\t\t\t\"\\\" must end with \\\"]\\\"\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tignoreLine = false;\r\n\t\t\t\t}\r\n\t\t\t\tnewLine = true;\r\n\t\t\t\tskipSpace = true;\r\n\t\t\t\tisKey = true;\r\n\t\t\t\t\r\n\t\t\t\tline ();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tcontrol.parsed = true;\r\n\t\r\n\tif (isSectionLine && !ignoreLine){\r\n\t\t//The section doesn't end with ], it's a key\r\n\t\tcontrol.error = new Error (\"The section line \\\"\" + section + \"\\\" must end\" +\r\n\t\t\t\t\"with \\\"]\\\"\");\r\n\t\treturn;\r\n\t}\r\n\tline ();\r\n};","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/write.js":"\"use strict\";\r\n\r\nvar fs = require (\"fs\");\r\nvar stringify = require (\"./stringify\");\r\n\r\nmodule.exports = function (stringifier, options, cb){\r\n\tif (typeof options === \"function\"){\r\n\t\tcb = options;\r\n\t\toptions = {};\r\n\t}\r\n\t\r\n\toptions = options || {};\r\n\tvar code;\r\n\t\r\n\tif (options.comment){\r\n\t\tcode = options.comment.charCodeAt (0);\r\n\t\tif (options.comment.length > 1 || code < 33 || code > 126){\r\n\t\t\tthrow new Error (\"The comment token must be a single printable ASCII \" +\r\n\t\t\t\t\t\"character\");\r\n\t\t}\r\n\t\toptions._comment = options.comment;\r\n\t}else{\r\n\t\toptions._comment = \"#\";\r\n\t}\r\n\t\r\n\toptions._comment += \" \";\r\n\t\r\n\tif (options.separator){\r\n\t\tcode = options.separator.charCodeAt (0);\r\n\t\tif (options.separator.length > 1 || code < 33 || code > 126){\r\n\t\t\tthrow new Error (\"The separator token must be a single printable ASCII \" +\r\n\t\t\t\t\t\"character\");\r\n\t\t}\r\n\t\toptions._separator = options.separator;\r\n\t}else{\r\n\t\toptions._separator = \"=\";\r\n\t}\r\n\t\r\n\toptions._separator = \" \" + options._separator + \" \";\r\n\t\r\n\tvar data = stringify (stringifier, options);\r\n\t\r\n\tif (options.path){\r\n\t\tif (!cb) throw new TypeError (\"A callback must be passed if the data is \" +\r\n\t\t\t\t\"stored into a file\");\r\n\t\tfs.writeFile (options.path, data, function (error){\r\n\t\t\tif (error) return cb (error);\r\n\t\t\tcb (null, data);\r\n\t\t});\r\n\t}else{\r\n\t\treturn data;\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/stringify.js":"\"use strict\";\r\n\r\nvar escape = require (\"./escape\");\r\nvar Stringifier = require (\"./stringifier\");\r\n\r\n//The data doesn't need to be buffered because .properties files typically\r\n//have a size less than a block (default is 16KB)\r\n\r\nvar EOL = process.platform === \"win32\" ? \"\\r\\n\" : \"\\n\";\r\n\r\nvar stringifyComment = function (comment, meta, options){\r\n\tvar c;\r\n\tvar code;\r\n\tvar str = options._comment;\r\n\t\r\n\tfor (var i=0; i<comment.length; i++){\r\n\t\tc = comment[i];\r\n\t\tcode = comment.charCodeAt (i);\r\n\t\t\r\n\t\t//code 13: \\r\r\n\t\tif (code === 13) continue;\r\n\t\t\r\n\t\tif (code === 10){\r\n\t\t\t//code 10: \\n\r\n\t\t\tstr += EOL + options._comment;\r\n\t\t}else{\r\n\t\t\tstr += escape (c, code, meta, options);\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn str;\r\n};\r\n\r\nvar stringifyKey = function (s, meta, options){\r\n\tvar c;\r\n\tvar code;\r\n\tvar str = \"\";\r\n\t\r\n\tfor (var i=0; i<s.length; i++){\r\n\t\tc = s[i];\r\n\t\tcode = s.charCodeAt (i);\r\n\t\tstr += escape (c, code, meta, options);\r\n\t}\r\n\t\r\n\treturn str;\r\n};\r\n\r\nvar stringifyValue = function (s, meta, options){\r\n\tvar c;\r\n\tvar code;\r\n\tvar str = \"\";\r\n\t\r\n\tfor (var i=0; i<s.length; i++){\r\n\t\tc = s[i];\r\n\t\tcode = s.charCodeAt (i);\r\n\t\t\r\n\t\t//code 32: \" \" (space)\r\n\t\t//code 9: \\t\r\n\t\t//code 12: \\f\r\n\t\tif (code !== 32 && code !== 9 && code !== 12){\r\n\t\t\tmeta.whitespace = false;\r\n\t\t}\r\n\t\t\r\n\t\tstr += escape (c, code, meta, options);\r\n\t}\r\n\t\r\n\treturn str;\r\n};\r\n\r\nvar stringifyObject = function (obj, options){\r\n\tvar str = \"\";\r\n\tvar meta = {\r\n\t\tseparator: options._separator.charCodeAt (0)\r\n\t};\r\n\tvar value;\r\n\tvar first = true;\r\n\t\r\n\tif (options.replacer){\r\n\t\tvar o = {\r\n\t\t\tassert: function (){\r\n\t\t\t\treturn replace.property ? replace.value : true;\r\n\t\t\t},\r\n\t\t\tisProperty: true,\r\n\t\t\tisSection: false\r\n\t\t};\r\n\t}\r\n\r\n\tfor (var p in obj){\r\n\t\tvalue = obj[p];\r\n\t\t\r\n\t\tif (options.replacer){\r\n\t\t\tvalue = options.replacer.call (o, p, value, null);\r\n\t\t\tif (value === undefined) continue;\r\n\t\t}\r\n\t\t\r\n\t\tif (!first) str += EOL;\r\n\t\t\r\n\t\tmeta.whitespace = true;\r\n\t\t\r\n\t\tmeta.key = true;\r\n\t\tstr += stringifyKey (p, meta, options);\r\n\t\tmeta.key = false;\r\n\t\t\r\n\t\tstr += options._separator;\r\n\t\t\r\n\t\tif (value !== null && value !== undefined){\r\n\t\t\tstr += stringifyValue (value + \"\", meta, options);\r\n\t\t}\r\n\t\t\r\n\t\tmeta.whitespace = false;\r\n\t\t\r\n\t\tfirst = false;\r\n\t}\r\n\t\r\n\treturn str;\r\n};\r\n\r\nvar stringifyStringifier = function (stringifier, options){\r\n\tvar str = \"\";\r\n\tvar meta = {\r\n\t\tseparator: options._separator.charCodeAt (0)\r\n\t};\r\n\tvar first = true;\r\n\tvar currentSection = null;\r\n\tvar skipSection;\r\n\tvar value;\r\n\tvar replace;\r\n\t\r\n\tif (options.replacer){\r\n\t\tvar o = {\r\n\t\t\tassert: function (){\r\n\t\t\t\treturn replace.property ? replace.value : true;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tif (stringifier._header){\r\n\t\tmeta.comment = true;\r\n\t\tstr += stringifyComment (stringifier._header, meta, options) + EOL + EOL;\r\n\t\tmeta.comment = false;\r\n\t}\r\n\t\r\n\tstringifier._lines.forEach (function (line){\r\n\t\treplace = line;\r\n\t\r\n\t\tif (options.replacer){\r\n\t\t\tif (line.property){\r\n\t\t\t\tif (skipSection) return;\r\n\t\t\t\to.isProperty = true;\r\n\t\t\t\to.isSection = false;\r\n\t\t\t\tvalue = options.replacer.call (o, line.key, line.value, currentSection);\r\n\t\t\t\tif (value === undefined) return;\r\n\t\t\t\tline.value = value;\r\n\t\t\t}else{\r\n\t\t\t\tskipSection = false;\r\n\t\t\t\to.isProperty = false;\r\n\t\t\t\to.isSection = true;\r\n\t\t\t\tif (options.replacer.call (o, null, null, line.name)){\r\n\t\t\t\t\tcurrentSection = line.name;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tskipSection = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tif (!first) str += line.property ? EOL : EOL + EOL;\r\n\t\t\r\n\t\tif (line.comment){\r\n\t\t\tmeta.comment = true;\r\n\t\t\tstr += stringifyComment (line.comment, meta, options) + EOL;\r\n\t\t\tmeta.comment = false;\r\n\t\t}\r\n\t\t\r\n\t\tif (line.property){\r\n\t\t\tmeta.whitespace = true;\r\n\t\t\t\r\n\t\t\tif (line.key !== null && line.key !== undefined){\r\n\t\t\t\tmeta.key = true;\r\n\t\t\t\tstr += stringifyKey (line.key + \"\", meta, options);\r\n\t\t\t\tmeta.key = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tstr += options._separator;\r\n\t\t\t\r\n\t\t\tif (line.value !== null && line.value !== undefined){\r\n\t\t\t\tstr += stringifyValue (line.value + \"\", meta, options);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmeta.whitespace = false;\r\n\t\t}else{\r\n\t\t\tif (line.name){\r\n\t\t\t\tstr += \"[\" + stringifyKey (line.name + \"\", meta, options) +\r\n\t\t\t\t\t\t\"]\";\r\n\t\t\t}else{\r\n\t\t\t\tstr += \"[]\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfirst = false;\r\n\t});\r\n\t\r\n\treturn str;\r\n};\r\n\r\nmodule.exports = function (stringifier, options){\r\n\tif (!(stringifier instanceof Stringifier)){\r\n\t\treturn stringifyObject (stringifier, options);\r\n\t}else{\r\n\t\treturn stringifyStringifier (stringifier, options);\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-properties/node_modules/properties/lib/escape.js":"\"use strict\";\r\n\r\nvar unicode = function (code){\r\n\tvar unicode = code.toString (16);\r\n\twhile (unicode.length !== 4){\r\n\t\tunicode = \"0\" + unicode;\r\n\t}\r\n\treturn \"\\\\u\" + unicode;\r\n};\r\n\r\nmodule.exports = function (c, code, meta, options){\r\n\t//Encode characters to their unicode representation to be compatible with\r\n\t//ISO 8859-1 (latin1)\r\n\t\r\n\t//code 61: =\r\n\t//code 58: :\r\n\tif (meta.key && (code === 61 || code === 58 || code === meta.separator)){\r\n\t\t//Escape the separator in the key string\r\n\t\treturn \"\\\\\" + c;\r\n\t}\r\n\t\r\n\t//ASCII printable characters\r\n\tif (code > 31 && code < 127){\r\n\t\t//Space at the begining of a word\r\n\t\t//If whitespace is true the space needs to be escaped\r\n\t\t//In comments, meta.whitespace is always false\r\n\t\tif (code === 32 && meta.whitespace){\r\n\t\t\treturn \"\\\\ \";\r\n\t\t}\r\n\t\t//Backslash\r\n\t\tif (code === 92) return \"\\\\\\\\\";\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\t//ASCII non-printable characters\r\n\t//Escaped\r\n\tif (code === 9) return meta.comment ? c : \"\\\\t\";\r\n\tif (code === 10) return \"\\\\n\";\r\n\tif (code === 12) return meta.comment ? c : \"\\\\f\";\r\n\tif (code === 13) return meta.comment ? c : \"\\\\r\";\r\n\t\r\n\t//Control sets 0 and 1\r\n\tif (code < 160) return unicode (code);\r\n\t\r\n\t//Printable 8-bit character\r\n\tif (code < 256) return c;\r\n\t\r\n\t//Latin1 multibyte character\r\n\treturn options.unicode ? unicode (code) : c;\r\n};"}